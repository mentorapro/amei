{"files": [{"name": "appsscript", "source": "{\n  \"timeZone\": \"America/Sao_Paulo\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": []\n  },\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}", "type": "json"}, {"name": "main", "source": "var currentDate = new Date();\n\nfunction doGet(e) {\n  let parameters = e.parameter;\n  let template = HtmlService.createTemplateFromFile('index');\n  template.param = parameters.amei;\n  return template.evaluate()\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);;\n}\n\nfunction include(filename) {\n  return HtmlService.createHtmlOutputFromFile(filename).getContent();\n}\n\nfunction getSheet(sheetName, workSheet) {\n  var sheetId = DriveApp.getFoldersByName('automatizacao').next().getFoldersByName('agenda').next().getFilesByName(sheetName).next().getId();\n  var ss = SpreadsheetApp.openById(sheetId);\n  return ss.setActiveSheet(ss.getSheetByName(workSheet));\n}\n\nasync function getHours(providerId) {\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = paths.hours.replace('{id}', providerId);\n  var docAux = await getAll(uri, path);\n  return docAux.data;\n}\n\nasync function getEvents(providerId) {\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = `${paths.providers}/${providerId}/events`;\n  var docAux = await getAll(uri, path);\n  return docAux.data;\n}\n\nasync function getProviders(amei) {\n  subscriptionId = amei;\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = paths.providers;\n  var docAux = (await getAll(uri, path)).data;\n  var providers = [];\n\n  for (let i = 0; i < docAux.length; i++) {\n    p = docAux[i];\n    providers.push({\n      id: p.id,\n      calendar: p.calendar,\n      name: p.name,\n      cel: p.cel,\n      email: p.email,\n      func: p.func,\n      hours: getHours(p.id),\n      events: getEvents(p.id)\n    });\n  }\n\n  return returnObject(false, '', providers);\n}\n\nasync function getServices(amei) {\n  try {\n    subscriptionId = amei;\n    var uri = baseUrl + uris.getAllDocuments;\n    var path = paths.services;\n    return await getAll(uri, path);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n}\n\nasync function getAllowedHours(date, provider) {\n  var dateParsed = new Date(`${date}T03:00:00`);\n  var dateTimeArr = [];\n  var allowedHours = [];\n\n  var hours = provider.hours[dateParsed.getDay()].values;\n\n  hours.forEach((hour) => {\n    var newDate = new Date(`${date}T${hour}`);\n    dateTimeArr.push(newDate);\n  });\n\n  try {\n    var calendar = CalendarApp.getCalendarById(provider.calendar);\n    var dayEvents = calendar.getEventsForDay(dateParsed);\n    var eventsStart = [];\n\n    if (dayEvents <= 0)\n      return response(false, 'success', hours);\n    else {\n      dayEvents.forEach((event) => {\n        var startTime = event.getStartTime();\n        var endTime = event.getEndTime();\n        var timeStart = `${startTime.getHours().toString().padStart(2, '0')}:${startTime.getMinutes().toString().padStart(2, '0')}`;\n        eventsStart.push(timeStart);\n        for (let i = 0; i < dateTimeArr.length; i++) {\n          var time = dateTimeArr[i];\n          var timeString = `${time.getHours().toString().padStart(2, '0')}:${time.getMinutes().toString().padStart(2, '0')}`;\n          var index = allowedHours.findIndex(value => value == timeString);\n          if ((time >= startTime && time < endTime) || index > -1)\n            continue;\n\n          allowedHours.push(timeString);\n        }\n      })\n    }\n\n    allowedHours = allowedHours.filter(value => !eventsStart.includes(value));\n\n    return response(false, 'success', allowedHours);\n\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n}\n\nasync function setSchedulle(order) {\n  try {\n    var uri = baseUrl + uris.createDoc;\n    subscriptionId = order.amei;\n    if (order.consumer.id == '') {\n      var client = {\n        name: order.consumer.name,\n        cel: order.consumer.cel,\n        email: order.consumer.email\n      }\n\n      order.consumer.id = (await save(uri, paths.client, client)).data;\n    }\n    var maxValues = getServiceMaxDuration(order.selectedServices);\n    var eventId = createCalendarEvent(order, maxValues).getId();\n    var event = { event: eventId };\n\n    await save(uri, `${paths.client}/${order.consumer.id}/events`, event);\n    await save(baseUrl + uris.createDoc, `${paths.providers}/${order.provider.id}/events`, event);\n\n    return response(false, 'success', order.consumer);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n\n}\n\nfunction getServiceMaxDuration(services) {\n  var setWeights = [];\n  var setDurations = [];\n\n  services.forEach((service) => {\n    setWeights.push(parseInt(service.unityWeight));\n  });\n\n  var maxWeight = setWeights.sort((a, b) => a - b).reverse()[0];\n\n  services.forEach((service) => {\n    if (service.unityWeight == maxWeight) {\n      setDurations.push(service.duration);\n    }\n  });\n\n  var maxDuration = setDurations.sort((a, b) => a - b).reverse()[0];\n\n  return {\n    maxDuration: maxDuration,\n    maxWeight: maxWeight\n  };\n}\n\nfunction createCalendarEvent(order, maxValues) {\n  var services = [];\n  order.selectedServices.forEach((service) => {\n    services.push(service.name);\n  });\n  var calendar = CalendarApp.getCalendarById(order.provider.calendar);\n\n  if (calendar) {\n    var startTime = new Date(`${order.date}T${order.hour}`);\n    var endTime = new Date(getEndTime(startTime.getTime(), maxValues));\n    var desc = `Cliente::${order.consumer.name}.\\nServicos: ${services.toString()}\\n.Contato: ${order.consumer.cel}`;\n    return calendar.createEvent(`Atendimento :: ${order.consumer.name}`, startTime, endTime, {\n      description: desc,\n      guests: order.consumer.email,\n      sendInvites: true\n    });\n  }\n}\n\nfunction getEndTime(startTime, maxValues) {\n  var newDate = new Date(startTime);\n  var duration = maxValues.maxDuration;\n\n  switch (maxValues.maxWeight) {\n    case 1:\n      return newDate.setMinutes(newDate.getMinutes() + duration);\n    case 2:\n      return newDate.setHours(newDate.getHours() + duration);\n    case 3:\n      return newDate.setDate(newDate.getDate() + duration);\n    case 4:\n      var days = duration * 30;\n      return newDate.setMonth(newDate.getMonth() + month);\n    case 5:\n      var days = duration * 365;\n      return newDate.setYear(newDate.getYear() + days);\n  }\n}\n\nvar response = (error, message, data) => {\n  return {\n    hasError: error,\n    message: message,\n    data: data\n  }\n}\n\nasync function getClientByEmail(email, amei) {\n  try {\n    subscriptionId = amei;\n    var uri = baseUrl + uris.getDocumentByQuery;\n    var path = paths.client;\n    var body = queryRequest('email', '==', email, path);\n    return await callResource(uri, body);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n}\n", "type": "server_js"}, {"name": "app.js", "source": "<script defer>\n  var app = angular.module('app', ['angularMask']);  \n\n  app.controller('AppController', function AppController($scope) {\n    $scope.page = 1;\n    $scope.providers = [];\n    $scope.allowedHours = [];\n    $scope.today = new Date().toISOString().substring(0,10);\n    $scope.selectedDate = $scope.today;\n\n    $scope.order = {\n      date: undefined,\n      hour: '',\n      consumer: {\n        id: '',\n        name: '',\n        cel: '',\n        email: '',\n        details:'',\n      },\n      provider: null,\n      total: 0,\n      selectedServices: []\n    }\n\n    $scope.pages = [\n      {number: 1, title: 'Dados Pessoais'},\n      {number: 2, title: 'Seleção de Serviços'},\n      {number: 3, title: 'Seleção de Data/Hora'},\n      {number: 4, title: 'Confirmação do Agendamento'},\n    ];\n\n    $scope.error = {\n      hasError: false,\n      message: []\n    };\n\n    $scope.services = [];\n\n    $scope.removeService = function(service){\n      var index = $scope.order.selectedServices.findIndex(s => s.id == service.id);\n\n      service.selected = false;\n      $scope.order.total -= service.price;\n      $scope.order.selectedServices.splice(index,1);\n    }\n\n    $scope.selectProvider = function(provider){\n      $scope.providers.forEach((p) => {p.selected = false});\n      provider.selected = !provider.selected;\n\n      if (provider.selected){\n        $scope.order.provider = provider;\n        var today = new Date();\n        getAllowedHours(today.toISOString().substring(0,10), provider);\n      }\n      else\n        $scope.provider = undefined;\n    }\n\n    $scope.selectService = function(service){\n      var index = $scope.order.selectedServices.findIndex(s => s.id == service.id);\n      if (index > -1) return;\n\n      service.selected = true;\n      $scope.order.total += service.price;\n      $scope.order.selectedServices.push(service);\n    }\n\n    $scope.nextPage = function(currentPage){\n      validate();\n      $scope.page++;\n    }\n\n    $scope.prevPage = function(currentPage){\n      $scope.page--;\n    }\n\n    var validate = function(){\n    $scope.error.message = [];\n\n    if ($scope.order.consumer.name == '')\n      $scope.error.message.push('O campo nome não pode ficar vazio!');\n\n    if ($scope.order.consumer.celular == '')\n      $scope.error.message.push('O campo celular não pode ficar vazio!');\n    \n    if ($scope.order.consumer.email == '')\n      $scope.error.message.push('O campo email não pode ficar vazio!');\n\n    $scope.error.hasError = $scope.error.message.length > 0;\n\n    if($scope.error.hasError)\n      window.scrollTo(0,0);\n    }\n\n    $scope.schedulle = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else{\n          $scope.order.consumer = response.data;\n          window.localStorage.setItem('consumer', $scope.order.consumer.id);\n        }\n      }).setSchedulle($scope.order);\n    }\n\n    var getServices = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if(response.hasError){\n          console.log(response.message);\n        }else{\n          $scope.services = response.data;\n        }\n        $scope.$apply();\n      }).getServices($scope.getSessionStorage('amei'));\n    }\n\n    var getProviders = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if(response.hasError){\n          console.log(response.message);\n        }else{\n          $scope.providers = response.data;\n        }\n        $scope.$apply();\n      }).getProviders($scope.getSessionStorage('amei'));\n    }\n\n    var getAllowedHours = function(data, provider){\n      $scope.isPast = false;\n      if (new Date(data) < new Date($scope.today)){\n        $scope.isPast = true;\n        return;\n      }\n\n      $scope.allowedHours = [];\n\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else{\n          $scope.allowedHours = response.data;\n          $scope.$apply();\n        }\n      }).getAllowedHours(data, provider);\n    }\n\n    $scope.getClientByEmail = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else if(Object.keys(response.data).length > 0){\n          $scope.order.consumer = response.data;\n          $scope.$apply();\n        }\n          \n      }).getClientByEmail($scope.order.consumer.email, $scope.order.amei);\n    }\n\n    var startModals = () => {\n      var modals = document.querySelectorAll('.modal');\n      var instances = M.Modal.init(modals, {});\n    }\n\n    var startComponents = function(){\n      startModals();\n      var dateOptions =\n        {\n          // Define the months in portuguese\n          months: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n          // Define the months in portuguese\n          monthsFull: [\n              'Janeiro',\n              'Fevereiro',\n              'Março',\n              'Abril',\n              'Maio',\n              'Junho',\n              'Julho',\n              'Agosto',\n              'Setembro',\n              'Outubro',\n              'Novembro',\n              'Dezembro'\n          ],\n          // Define the weekdays\n          weekdays: [\n              'Domingo',\n              'Segunda',\n              'Terça',\n              'Quarta',\n              'Quinta',\n              'Sexta',\n              'Sábado'\n          ],\n          // Labels\n          textDone: 'Feito',\n          textReset: 'Limpar',\n          textUpdate: 'Atualizar',\n          startingDay: 0,\n          format: 'YYYY-Mon-DD',\n          onupdate: (instance, value) => {\n            $scope.order.date = value.substring(0,10);\n            if(value !== '' && $scope.order.provider != null){\n              var selectedDate = new Date(value);\n              getAllowedHours(value.substring(0,10), $scope.order.provider);\n            }\n          }\n        };\n\n      var elem = document.querySelectorAll('.datepicker')[0];\n      jSuites.calendar(elem,dateOptions);\n      \n    }\n\n    $scope.selecHour = function(hour){\n      $scope.order.hour = hour;\n    }\n\n    $scope.getSessionStorage = function(key){\n      return window.sessionStorage.getItem(key);\n    }\n\n    $scope.init = function() {\n      setTenant();\n      startComponents();\n    }\n\n    var setTenant = function(){\n      let tenant = document.getElementsByName('amei')[0];\n\n      google.script.run.withSuccessHandler((response) => {\n        if (!response.hasError){\n          window.sessionStorage.setItem('amei', response.data);\n          getServices();\n          getProviders();\n          $scope.order.amei = response.data;\n        }\n      }).showData(tenant.value);\n    }\n  });\n</script>", "type": "html"}, {"name": "index", "source": "<!DOCTYPE html>\n<html>\n\n<head>\n  <base target=\"_top\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <!-- Compiled and minified CSS -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/simple-jscalendar@1.4.4/source/jsCalendar.min.css\"\n    integrity=\"sha384-44GnAqZy9yUojzFPjdcUpP822DGm1ebORKY8pe6TkHuqJ038FANyfBYBpRvw8O9w\" crossorigin=\"anonymous\">\n  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\"></script>\n  <!-- Compiled and minified JavaScript -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\" defer></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/simple-jscalendar@1.4.4/source/jsCalendar.min.js\"\n    integrity=\"sha384-0LaRLH/U5g8eCAwewLGQRyC/O+g0kXh8P+5pWpzijxwYczD3nKETIqUyhuA8B/UB\" crossorigin=\"anonymous\">\n  </script>\n\n  <script src=\"https://jsuites.net/v4/jsuites.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://jsuites.net/v4/jsuites.css\" type=\"text/css\" />\n  <?!= include('simplemask');?>\n\n  <style>\n    .jsCalendar table tr {\n      display: flex;\n      justify-content: center;\n    }\n\n    .calendar-schedule {\n      display: flex;\n    }\n\n    .active-date {\n      background-color: #7000FF;\n      border-radius: 18px;\n      color: #fff;\n    }\n\n    .btn,\n    .btn-flat {\n      border-radius: 100px;\n    }\n\n    .scrollable {\n      max-heigth: 300px;\n      overflow-y: auto;\n    }\n\n    .modal-close.button-close {\n      position: absolute;\n      right: 0;\n      padding: 12px;\n      color: #ba0026;\n    }\n  </style>\n</head>\n\n<body ng-app=\"app\">\n  <input type=\"hidden\" name='amei' value='<?=param?>' />\n  <div class=\"container\" ng-controller=\"AppController\">\n    <div ng-show=\"error.hasError\" class=\"card-panel col s12 red accent-1\"\n      style=\"display: flex; align-items: center;color: #b71c1c;\">\n      <i class=\"material-icons\">error</i>\n      <div class=\"row\" style=\"margin-bottom:0;margin-left: 0\">\n        <span class=\"col s12\" ng-repeat=\"erro in error.message\">{{erro}}</span>\n      </div>\n    </div>\n    <div class=\"card-panel row z-depth-3\" ng-init=\"init()\">\n      <form id=\"mp-schedule\" style=\"position: relative;\">\n        <div class=\"header row\">\n          <h4 class=\"title\">Agenda</h4>\n        </div>\n        <div class=\"body\">\n          <?!= include('dadosPessoais');?>\n          <?!= include('servicos');?>\n          <?!= include('agendamento');?>\n          <?!= include('confirmation');?>\n        </div>\n      </form>\n    </div>\n  </div>\n  <?!= include('app.js');?>\n</body>\n\n</html>", "type": "html"}, {"name": "dadosPessoais", "source": "<div id=\"content-form-1\" class=\"personal-data row\" ng-show=\"page == 1\">\n  <p><strong>{{pages[0].title}}</strong></p>\n  <p>\n    Para darmos inicio ao seu agendamento precisamos que você nos informe os seus dados pessoais.<br>\n    <sup>Se você já fez outros agendamentos utilize o mesmo e-mail.</sup>\n  </p>\n  <div class=\"col s12\">\n    <label for=\"customer-email\">Email *</label>\n    <input type=\"email\" class=\"validate\" id=\"customer-email\" ng-model=\"order.consumer.email\" ng-blur=\"getClientByEmail(order.consumer.email)\"/>\n  </div>\n  <div class=\"col s12\">\n    <label for=\"customer-name\">Nome *</label>\n    <input type=\"text\" \n      class=\"validate\" \n      id=\"customer-name\"\n      ng-model=\"order.consumer.name\"/>\n  </div>\n  <div class=\"col s12\" style=\"padding: 0;\">\n    <div class=\"col s12\">\n      <label for=\"customer-celular\">Celular *</label>\n      <input type=\"text\" class=\"validate\"\n        id=\"customer-celular\"\n        ng-model=\"order.consumer.cel\"\n        angular-mask=\"(00) 00000-0000|(00) 0000-0000\" \n        maxlength=\"15\"/>\n    </div>\n  </div>\n  <div class=\"footer col s12 section\" style=\"margin-top:32px\">\n    <button type=\"button\" \n      class=\"btn waves-effect waves-teal btn-flat right\" \n      ng-click=\"nextPage(pages[0].number)\">Próximo</button>\n  </div>\n</div>", "type": "html"}, {"name": "servicos", "source": "<div class=\"\">\n</div>\n<div id=\"content-form-2\" class=\"services row\" ng-show=\"page == 2\">\n  <p><strong>{{pages[1].title}}</strong></p>\n  <p>Nesta etapa você deverá selecionar os serviços que deseja atendimento.</p>\n  <div class=\"col s12\">\n    <table>\n      <thead>\n        <th style=\"width: 80px;\"></th>\n        <th>Serviço</th>\n        <th>Preço</th>\n        <th style=\"width: 80px;\"></th>\n      </thead>\n      <tbody class=\"scrollable\">\n        <tr ng-repeat=\"service in services\">\n          <td>\n            <button class=\"btn btn-flat\" ng-click=\"selectService(service)\">\n                <i class=\"material-icons\" ng-show=\"!service.selected\">add</i>\n                <i class=\"material-icons\" ng-show=\"service.selected\">check</i>\n              </button>\n\n          </td>\n          <td>{{service.name}}</td>\n          <td>R$ {{service.price.toString().replace('.',',')}}</td>\n          <td><button class=\"btn btn-flat red accent-1\"  ng-click=\"removeService(service)\" ng-show=\"service.selected\" style=\"color: #ff1744 \">\n                <i class=\"material-icons\">delete</i>\n              </button>\n          </td>\n        </tr>\n        <tr>\n          <td colspan=\"4\">\n            <a class=\"btn waves-effect teal lighten-5 btn-flat modal-trigger\" href=\"#select-provider\"\n              style=\"margin-right: 8px;\">\n              <div>\n                <span  ng-if=\"order.provider != null\">{{order.provider.name}}</span>\n                <span ng-if=\"order.provider == null\">Selecione um provedor</span>\n              </div>\n            </a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class=\"col s12 m6\">\n    <div class=\"col s6 card-panel teal lighten-2\" id=\"customer-services-total\"\n      style=\"color: #f8f8f8;padding:16px; position: absolute; top: 0; right: 0;\">\n      Total: <span class=\"badge\" style=\"color: #f8f8f8;\">R$ {{order.total.toString().replace('.',',')}}</span></span>\n    </div>\n  </div>\n  <div class=\"footer col s12 section\" style=\"margin-top:32px\">\n    <button type=\"button\" class=\"waves-effect waves-teal btn-flat left\" ng-click=\"prevPage(pages[1].number)\">Anterior</button>\n    <button type=\"button\" class=\"waves-effect waves-teal btn-flat right\" ng-click=\"nextPage(pages[1].number)\">Próximo</button>\n  </div>\n</div>\n<div id=\"select-provider\" class=\"modal\" style=\"max-width: 420px;\">\n  <a class=\"modal-close button-close\">\n    <i class=\"material-icons\">close</i>\n  </a>\n  <div class=\"modal-content\">\n    <h6><strong>Selectionar Prestador</strong></h6>\n    <ul class=\"collection\">\n      <li class=\"collection-item modal-close\" ng-click=\"selectProvider(p)\" ng-repeat=\"p in providers\">\n        <span class=\"title\">{{p.name}}</span>\n        <p>{{p.func}}<br>\n        </p>\n      </li>\n    </ul>\n  </div>\n</div>", "type": "html"}, {"name": "agendamento", "source": "<div id=\"content-form-3\" class=\"schedule row \" ng-show=\"page == 3\">\n  <p><strong>{{pages[2].title}}</strong></p>\n  <p>Nesta etapa você deverá selecionar a data e o horário do seu atendimento.</p>\n  <div class=\"col s12\">\n    <div class=\"col s12 m6 l5\">\n      <div class=\"datepicker\"></div>\n    </div>\n    <div class=\"col s12 m3 l6\">\n      <span ng-show=\"isPast\">Datas passadas não são permitidas.</span>\n      <span class=\"btn\" ng-show=\"!isPast\" ng-repeat=\"h in allowedHours track by $index\" ng-click=\"selecHour(h)\" \n        style='cursor:pointer; margin:4px' \n        ng-class=\"{'teal': (order.hour == hour), 'teal lighten-5 black-text': (order.hour !== h)}\">\n        <span class=\"title\">{{h}}</span>\n        <a href=\"#!\" class=\"secondary-content\" ng-show=\"order.hour == h\"><i class=\"material-icons\">check</i></a>\n      </span>\n    </div>\n  </div>\n  <div class=\"footer col s12 section\" style=\"margin-top:32px\">\n    <button type=\"button\" class=\"waves-effect waves-teal btn-flat left\" ng-click=\"prevPage(pages[2].number)\">Anterior</button>\n    <button type=\"button\" class=\"waves-effect waves-teal btn-flat right\" ng-click=\"nextPage(pages[2].number)\">Próximo</button>\n  </div>\n</div>", "type": "html"}, {"name": "confirmation", "source": "<div id=\"content-form-3\" class=\"schedule row \" ng-show=\"page == 4\">\n  <p><strong>{{pages[3].title}}</strong></p>\n  <div class=\"col s12\">\n    <div class=\"col s12\">\n      <div class=\"col s12 card-panel\" style=\"padding: 16px;\">\n        <dl>\n          <dt><strong>Nome:</strong>{{order.consumer.name}}</dd>\n          <dt><strong>Data:</strong>{{order.date}}</dd>\n          <dt><strong>Hora:</strong>{{order.hour}}</dd>\n          <dt><strong>Total:</strong> R$ {{order.total.toString().replace('.',',')}}</dd>\n        </dl>\n        <button class=\"btn waves-effect waves-light teal\" id=\"btn-agendar\" ng-click=\"schedulle()\">Agendar</button>\n      </div>\n    </div>\n    <input type=\"hidden\" class=\"datepicker\" name=\"customerScheduleDate\" id=\"customer-schedule-date\"/>\n  </div>\n  <div class=\"footer col s12 section\" style=\"margin-top:32px\">\n    <button type=\"button\" class=\"waves-effect waves-teal btn-flat left\" ng-click=\"prevPage(pages[3].number)\">Anterior</button>\n  </div>\n</div>", "type": "html"}, {"name": "simplemask", "source": "<script>\n'use strict';\nangular.module('angularMask', [])\n  .directive('angularMask', function () {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      scope: {\n        isModelValueEqualViewValues: '='\n      },\n      link: function ($scope, el, attrs, model) {\n        $scope.$watch(function(){return attrs.angularMask;}, function(value) {\n          if (model.$viewValue != null){\n            model.$viewValue = mask(String(model.$viewValue).replace(/\\D/g, ''));\n            el.val(model.$viewValue);\n          }\n        });\n\n        model.$formatters.push(function (value) {\n          return value === null ? '' : mask(String(value).replace(/\\D/g, ''));\n        });\n\n        model.$parsers.push(function (value) {\n          model.$viewValue = mask(value);\n          var modelValue = $scope.isModelValueEqualViewValues ? model.$viewValue : String(value).replace(/\\D/g, '');\n          el.val(model.$viewValue);\n          return modelValue;\n        });\n\n        function mask(val) {\n          var format = attrs.angularMask,\n          arrFormat = format.split('|');\n\n          if (arrFormat.length > 1) {\n            arrFormat.sort(function (a, b) {\n              return a.length - b.length;\n            });\n          }\n\n          if (val === null || val == '') {\n            return '';\n          }\n          var value = String(val).replace(/\\D/g, '');\n          if (arrFormat.length > 1) {\n            for (var a in arrFormat) {\n              if (value.replace(/\\D/g, '').length <= arrFormat[a].replace(/\\D/g, '').length) {\n                format = arrFormat[a];\n                break;\n              }\n            }\n          }\n          var newValue = '';\n          for (var nmI = 0, mI = 0; mI < format.length;) {\n            if (!value[nmI]) {\n              break;\n            }\n            if (format[mI].match(/\\D/)) {\n              newValue += format[mI];\n            } else {\n              newValue += value[nmI];\n              nmI++;\n            }\n            mI++;\n          }\n          return newValue;\n        }\n      }\n    };\n  });\n</script>", "type": "html"}, {"name": "code", "source": "var baseUrl = \"https://us-central1-amei-mp0.cloudfunctions.net\";\nvar subscriptionId = '';\n\nvar uris = {\n  updateDoc: '/updateDocument',\n  deleteDoc: '/dropDocument',\n  getDoc: '/getDocument',\n  createDoc: '/createDocument',\n  getAllDocuments: '/getAllDocuments',\n  getDocumentByQuery: '/getQueriableDocument'\n}\n\nvar paths = {\n  providers: \"providers/list\",\n  services: \"services/list\",\n  hours: \"providers/list/{id}/hours\",\n  hour: \"providers/list/{id}/hours/{day}\",\n  client: \"clients/list\"\n};\n\nvar postRequest = function(path, data, collectionable = false) {\n  return {\n    subscriptionId: subscriptionId,\n    isCollection: collectionable,\n    path: path,\n    document: data\n  }\n}\n\nvar getRequest = function(path){\n  return {\n    subscriptionId: subscriptionId,\n    path: path\n  }\n}\n\nvar returnObject = function(isSuccess, message, data) {\n  return {\n    hasError: isSuccess,\n    message, message,\n    data: data\n  }\n}\n\nvar queryRequest = function(field, operator, value, path){\n  return {\n    subscriptionId: subscriptionId,\n    path: path,\n    query: {\n      field: field,\n      operator: operator,\n      value: value\n    }\n  }\n}\n\nasync function callResource(uri, body) {\n  var response = UrlFetchApp.fetch(uri, {\n    'async': true,\n    'method': \"post\",\n    'contentType': 'application/json',\n    'payload': JSON.stringify(body),\n  }).getContentText();  \n\n  return JSON.parse(response);\n}\n\nasync function save(uri, path, document, collectionable = false){\n\n  try {\n    if(document.$$hashKey)\n      delete document.$$hashKey\n\n    var body = postRequest(path, document, collectionable);\n    var response = await callResource(uri, body);\n\n    if (response.success){\n      document.id = response.id;\n      return returnObject(false, 'OK', document);\n    }\n      \n  } catch (err) {\n    return returnObject(true, err.message, null);\n  }\n}\n\nasync function getAll(uri, path){\n  try {\n    var body = getRequest(path);\n    var response = await callResource(uri, body);\n\n    if (response.success)\n      return returnObject(false, 'OK', response.data);\n\n  } catch (err) {\n    return returnObject(true, err.message,null);\n  }\n}\n\nasync function showData(tenant){\n  return getSubscriptionId(tenant);\n}\n\nasync function getSubscriptionId(tenant){\n  var uri = baseUrl + uris.getDoc;\n  subscriptionId = 'amei-admin';\n  var path = tenant;\n\n  try {\n    var body = getRequest(path);\n    var response = await callResource(uri, body);\n    if (response.success){\n      var data = response.data;\n      return returnObject(false, 'OK',data.tenantMail);\n    }\n      \n  } catch (err) {\n    return returnObject(true, err.message, null);\n  }\n  \n}", "type": "server_js"}]}
