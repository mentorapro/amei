{"files": [{"name": "appsscript", "source": "{\n  \"timeZone\": \"America/Sao_Paulo\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": []\n  },\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}", "type": "json"}, {"name": "main", "source": "var currentDate = new Date();\n\nfunction doGet(e) {\n  let parameters = e.parameter;\n  let template = HtmlService.createTemplateFromFile('cardUi');\n  template.param = parameters.amei;\n  return template.evaluate()\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);;\n}\n\nfunction include(filename) {\n  return HtmlService.createHtmlOutputFromFile(filename).getContent();\n}\n\nfunction getSheet(sheetName, workSheet) {\n  var sheetId = DriveApp.getFoldersByName('automatizacao').next().getFoldersByName('agenda').next().getFilesByName(sheetName).next().getId();\n  var ss = SpreadsheetApp.openById(sheetId);\n  return ss.setActiveSheet(ss.getSheetByName(workSheet));\n}\n\nasync function getHours(providerId) {\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = paths.hours.replace('{id}', providerId);\n  var docAux = await getAll(uri, path);\n  return docAux.data;\n}\n\nasync function getEvents(providerId) {\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = `${paths.providers}/${providerId}/events`;\n  var docAux = await getAll(uri, path);\n  return docAux.data;\n}\n\nasync function getProviders(amei) {\n  subscriptionId = amei;\n  var uri = baseUrl + uris.getAllDocuments;\n  var path = paths.providers;\n  var docAux = (await getAll(uri, path)).data;\n  var providers = [];\n\n  for (let i = 0; i < docAux.length; i++) {\n    p = docAux[i];\n    providers.push({\n      id: p.id,\n      calendar: p.calendar,\n      name: p.name,\n      cel: p.cel,\n      email: p.email,\n      func: p.func,\n      hours: getHours(p.id),\n      events: getEvents(p.id)\n    });\n  }\n\n  return returnObject(false, '', providers);\n}\n\nasync function getServices(amei) {\n  try {\n    subscriptionId = amei;\n    var uri = baseUrl + uris.getAllDocuments;\n    var path = paths.services;\n    return await getAll(uri, path);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n}\n\nasync function checkHour(order, hour, maxDurations) {\n  var date = new Date(`${order.date}T${hour}`);\n  var provider = order.provider;\n\n  var calendar = CalendarApp.getCalendarById(provider.calendar);\n\n  if (calendar) {\n    var event = calendar.getEvents(date, new Date(getEndTime(date, maxDurations)));\n\n    if (event.length > 0) {\n      //Not Allowed\n      return false;\n    } else {\n      return true;\n    }\n\n    if (dayEvents.length > 0) {\n      dayEvents.forEach((event) => {\n        var startTime = event.getStartTime();\n        var endTime = event.getEndTime();\n        if (date >= startTime && date <= endTime)\n          return false;\n      })\n    }\n    else\n      return true;\n  }\n}\n\nasync function setSchedule(order) {\n  try {\n    var uri = baseUrl + uris.createDoc;\n    subscriptionId = order.amei;\n    if (order.consumer.id == '') {\n      var client = {\n        name: order.consumer.name,\n        cel: order.consumer.cel,\n        email: order.consumer.email\n      }\n\n      order.consumer.id = (await save(uri, paths.client, client));\n    }\n    var maxValues = await getServiceMaxDuration(order.selectedServices);\n    var eventId = createCalendarEvent(order, maxValues).getId();\n    var event = { event: eventId };\n\n    await save(uri, `${paths.client}/${order.consumer.id}/events`, event);\n    await save(baseUrl + uris.createDoc, `${paths.providers}/${order.provider.id}/events`, event);\n\n    return response(false, 'success', order.consumer);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n\n}\n\nasync function getServiceMaxDuration(services) {\n  var setWeights = [];\n  var setDurations = [];\n\n  services.forEach((service) => {\n    setWeights.push(parseInt(service.unityWeight));\n  });\n\n  var maxWeight = setWeights.sort((a, b) => a - b).reverse()[0];\n\n  services.forEach((service) => {\n    if (service.unityWeight == maxWeight) {\n      setDurations.push(service.duration);\n    }\n  });\n\n  var maxDuration = setDurations.sort((a, b) => a - b).reverse()[0];\n\n  return {\n    maxDuration: maxDuration,\n    maxWeight: maxWeight\n  };\n}\n\nfunction createCalendarEvent(order, maxValues) {\n  var services = [];\n  order.selectedServices.forEach((service) => {\n    services.push(service.name);\n  });\n  var calendar = CalendarApp.getCalendarById(order.provider.calendar);\n\n  if (calendar) {\n    var startTime = new Date(`${order.date}T${order.hour}`);\n    var endTime = new Date(getEndTime(startTime.getTime(), maxValues));\n    var desc = `Cliente::${order.consumer.name}.\\nServicos: ${services.toString()}\\n.Contato: ${order.consumer.cel}`;\n    return calendar.createEvent(`Atendimento :: ${order.consumer.name}`, startTime, endTime, {\n      description: desc,\n      guests: order.consumer.email,\n      sendInvites: true\n    });\n  }\n}\n\nfunction getEndTime(startTime, maxValues) {\n  var newDate = new Date(startTime);\n  var duration = maxValues.maxDuration;\n\n  switch (maxValues.maxWeight) {\n    case 1:\n      return newDate.setMinutes(newDate.getMinutes() + duration);\n    case 2:\n      return newDate.setHours(newDate.getHours() + duration);\n    case 3:\n      return newDate.setDate(newDate.getDate() + duration);\n    case 4:\n      var days = duration * 30;\n      return newDate.setMonth(newDate.getMonth() + month);\n    case 5:\n      var days = duration * 365;\n      return newDate.setYear(newDate.getYear() + days);\n  }\n}\n\nvar response = (error, message, data) => {\n  return {\n    hasError: error,\n    message: message,\n    data: data\n  }\n}\n\nasync function getClientByEmail(email, amei) {\n  try {\n    subscriptionId = amei;\n    var uri = baseUrl + uris.getDocumentByQuery;\n    var path = paths.client;\n    var body = queryRequest('email', '==', email, path);\n    return await callResource(uri, body);\n  } catch (err) {\n    return response(true, err.message, null);\n  }\n}\n", "type": "server_js"}, {"name": "appjs", "source": "<script defer>\n  var app = angular.module('app', ['angularMask','ngMaterial', 'ngMessages']);  \n  app.controller('AppController', function AppController($scope, $mdBottomSheet, $mdToast, $mdDialog) {\n    $scope.name = '';\n    $scope.step = 0;\n    $scope.providers = [];\n    $scope.isUnique = false;\n    $scope.services = [];\n    $scope.allowedHours = [];\n    $scope.providerHours = [];\n    $scope.minDate = new Date();\n    $scope.selectedDate = new Date();\n    $scope.dateFriendly = '';\n\n    $scope.order = {\n      date: '',\n      hour: '',\n      consumer: {\n        id: '',\n        name: '',\n        cel: '',\n        email: '',\n        details:'',\n      },\n      provider: null,\n      total: 0.00,\n      selectedServices: []\n    }\n\n    $scope.error = {\n      hasError: false,\n      message: []\n    };\n\n    $scope.$watch('providerHours', (values) => {\n      if(values.length > 0){\n        var transitory = [];\n        for(var i = 0; i < values.length; i++)\n          checkHour(values[i]);\n      }\n    });\n\n    $scope.$watch('selectedDate', (value) => {\n      if(value !== undefined && $scope.order.provider !== null){\n        var date = new Date(new Date(value).setHours(0));\n        var index = date.getDay();\n        var aux = date.toISOString().substring(0,10).split('-');\n        $scope.order.date = date.toISOString().substring(0,10);\n        $scope.providerHours = $scope.order.provider.hours[index].values;\n        $scope.allowedHours = [];\n        $scope.dateFriendly = `${aux[2]}/${aux[1]}${aux[2]}`;\n      }\n    });\n\n    $scope.selectProvider = function(provider){\n      $scope.providers.forEach((p) => {p.selected = false});\n      provider.selected = !provider.selected;\n\n      if (provider.selected){\n        $scope.order.provider = provider;\n      }\n      else\n        $scope.provider = undefined;\n    }\n\n    $scope.selectService = function(service){\n      service.selected = !service.selected;\n\n      if (!service.selected){\n        var index = $scope.order.selectedServices.findIndex(s => s.id == service.id);\n        $scope.order.total -= parseFloat(service.price)\n        $scope.order.selectedServices.splice(index,1);\n      }else{\n        $scope.order.total += parseFloat(service.price);\n        $scope.order.selectedServices.push(service);\n      }\n\n      $scope.order.total = ($scope.order.total > 1) ? $scope.order.total : 0;\n    }\n\n    var validate = function(){\n    $scope.error.message = [];\n\n    if ($scope.order.consumer.name == '')\n      $scope.error.message.push('O campo nome não pode ficar vazio!');\n\n    if ($scope.order.consumer.celular == '')\n      $scope.error.message.push('O campo celular não pode ficar vazio!');\n    \n    if ($scope.order.consumer.email == '')\n      $scope.error.message.push('O campo email não pode ficar vazio!');\n\n    $scope.error.hasError = $scope.error.message.length > 0;\n\n    if($scope.error.hasError)\n      window.scrollTo(0,0);\n    }\n\n    $scope.schedule = function(){\n      console.log($scope.order);\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else{\n          $scope.order.consumer = response.data;\n          window.localStorage.setItem('consumer', $scope.order.consumer.id);\n          $scope.showAlert = function (ev) {\n            $mdDialog.show(\n              $mdDialog.alert()\n                .parent(angular.element(document.querySelector('#myDialog')))\n                .clickOutsideToClose(true)\n                .title('Pronto!')\n                .textContent('Agendamos com prestador ' + $scoper.order.provider)\n                .ariaLabel('Alerta de agendamento!')\n                .ok('OK!')\n                .targetEvent(ev)\n            );\n          }\n          $scope.cancel();\n        }\n      }).setSchedule($scope.order);\n    }\n\n    var getServices = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if(response.hasError){\n          console.log(response.message);\n        }else{\n          $scope.services = response.data;\n          if ($scope.services.length == 1){\n            $scope.selectService($scope.services[0]);\n            $scope.isUnique = $scope.services.length == 1;\n          }\n          setMaxValues();\n        }\n      }).getServices($scope.getSessionStorage('amei'));\n    }\n\n    var getProviders = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if(response.hasError){\n          console.log(response.message);\n        }else{\n          $scope.providers = response.data;\n          if ($scope.providers.length == 1)\n            $scope.order.provider = $scope.providers[0];\n          $scope.$apply();\n        }\n      }).getProviders($scope.getSessionStorage('amei'));\n    }\n\n    var checkHour = async function(hour){\n      google.script.run.withSuccessHandler((response) => {\n        if(response){\n          $scope.allowedHours.push(hour);\n          $scope.$apply();\n        }\n      }).checkHour($scope.order, hour, $scope.maxData);\n    }\n\n    $scope.getClientByEmail = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else if(Object.keys(response.data).length > 0){\n          $scope.order.consumer = response.data;\n        }\n          \n      }).getClientByEmail($scope.order.consumer.email, $scope.order.amei);\n    }\n\n    $scope.selecHour = function(hour){\n      $scope.order.hour = hour;\n    }\n\n    $scope.getSessionStorage = function(key){\n      return window.sessionStorage.getItem(key);\n    }\n\n    $scope.init = function() {\n      setTenant();\n    }\n\n    var setMaxValues = function(){\n      google.script.run.withSuccessHandler((response) => {\n        if (response.hasError)\n          console.log(response.message);\n        else{\n          $scope.maxData = response;\n        }\n      }).getServiceMaxDuration($scope.services);\n    }\n\n    var setTenant = function(){\n      let tenant = document.getElementsByName('amei')[0];\n\n      google.script.run.withSuccessHandler((response) => {\n        if (!response.hasError){\n          window.sessionStorage.setItem('amei', response.data);\n          getServices();\n          getProviders();\n          $scope.order.amei = response.data;\n        }\n      }).showData(tenant.value);\n    }\n\n    /*Template Functions*/\n    $scope.showProvidersBottomSheet = function() {\n      $mdBottomSheet.show({\n        templateUrl: 'providerBottomSheet.html',\n        controller: 'ListBottomController'\n      }).then(function(clickedItem) {\n        \n      }).catch(function(error) {\n        // User clicked outside or hit escape\n      });\n    };\n\n    $scope.showPrerenderedDialog = function (ev) {\n      $mdDialog.show({\n        contentElement: '#myDialog',\n        // Appending dialog to document.body to cover sidenav in docs app\n        // Modal dialogs should fully cover application to prevent interaction outside of dialog\n        parent: angular.element(document.body),\n        targetEvent: ev,\n        clickOutsideToClose: true\n      });\n    };\n\n    $scope.cancel = function(){\n      $mdDialog.cancel();\n    }\n\n    $scope.init();\n  }).controller('ListBottomController', function($scope, $mdBottomSheet){\n\n  });\n</script>", "type": "html"}, {"name": "simplemask", "source": "<script>\n'use strict';\nangular.module('angularMask', [])\n  .directive('angularMask', function () {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      scope: {\n        isModelValueEqualViewValues: '='\n      },\n      link: function ($scope, el, attrs, model) {\n        $scope.$watch(function(){return attrs.angularMask;}, function(value) {\n          if (model.$viewValue != null){\n            model.$viewValue = mask(String(model.$viewValue).replace(/\\D/g, ''));\n            el.val(model.$viewValue);\n          }\n        });\n\n        model.$formatters.push(function (value) {\n          return value === null ? '' : mask(String(value).replace(/\\D/g, ''));\n        });\n\n        model.$parsers.push(function (value) {\n          model.$viewValue = mask(value);\n          var modelValue = $scope.isModelValueEqualViewValues ? model.$viewValue : String(value).replace(/\\D/g, '');\n          el.val(model.$viewValue);\n          return modelValue;\n        });\n\n        function mask(val) {\n          var format = attrs.angularMask,\n          arrFormat = format.split('|');\n\n          if (arrFormat.length > 1) {\n            arrFormat.sort(function (a, b) {\n              return a.length - b.length;\n            });\n          }\n\n          if (val === null || val == '') {\n            return '';\n          }\n          var value = String(val).replace(/\\D/g, '');\n          if (arrFormat.length > 1) {\n            for (var a in arrFormat) {\n              if (value.replace(/\\D/g, '').length <= arrFormat[a].replace(/\\D/g, '').length) {\n                format = arrFormat[a];\n                break;\n              }\n            }\n          }\n          var newValue = '';\n          for (var nmI = 0, mI = 0; mI < format.length;) {\n            if (!value[nmI]) {\n              break;\n            }\n            if (format[mI].match(/\\D/)) {\n              newValue += format[mI];\n            } else {\n              newValue += value[nmI];\n              nmI++;\n            }\n            mI++;\n          }\n          return newValue;\n        }\n      }\n    };\n  });\n</script>", "type": "html"}, {"name": "code", "source": "var baseUrl = \"https://us-central1-amei-mp0.cloudfunctions.net\";\nvar subscriptionId = '';\n\nvar uris = {\n  updateDoc: '/updateDocument',\n  deleteDoc: '/dropDocument',\n  getDoc: '/getDocument',\n  createDoc: '/createDocumentList',\n  crateSingle: '/createDocument',\n  getAllDocuments: '/getAllDocuments',\n  getDocumentByQuery: '/getQueriableDocument'\n}\n\nvar paths = {\n  providers: \"providers/list\",\n  services: \"services/list\",\n  hours: \"providers/list/{id}/hours\",\n  hour: \"providers/list/{id}/hours/{day}\",\n  client: \"clients/list\"\n};\n\nvar postRequest = function(path, data, collectionable = false) {\n  return {\n    subscriptionId: subscriptionId,\n    isCollection: collectionable,\n    path: path,\n    document: data\n  }\n}\n\nvar getRequest = function(path){\n  return {\n    subscriptionId: subscriptionId,\n    path: path\n  }\n}\n\nvar returnObject = function(isSuccess, message, data) {\n  return {\n    hasError: isSuccess,\n    message, message,\n    data: data\n  }\n}\n\nvar queryRequest = function(field, operator, value, path){\n  return {\n    subscriptionId: subscriptionId,\n    path: path,\n    query: {\n      field: field,\n      operator: operator,\n      value: value\n    }\n  }\n}\n\nasync function callResource(uri, body) {\n  var response = UrlFetchApp.fetch(uri, {\n    'async': true,\n    'method': \"post\",\n    'contentType': 'application/json',\n    'payload': JSON.stringify(body),\n  }).getContentText();  \n\n  return JSON.parse(response);\n}\n\nasync function save(uri, path, document, collectionable = false){\n\n  try {\n    if(document.$$hashKey)\n      delete document.$$hashKey\n\n    var body = postRequest(path, document, collectionable);\n    var response = await callResource(uri, body);\n\n    if (response.success){\n      document.id = response.id;\n      return returnObject(false, 'OK', document);\n    }\n      \n  } catch (err) {\n    return returnObject(true, err.message, null);\n  }\n}\n\nasync function getAll(uri, path){\n  try {\n    var body = getRequest(path);\n    var response = await callResource(uri, body);\n\n    if (response.success)\n      return returnObject(false, 'OK', response.data);\n\n  } catch (err) {\n    return returnObject(true, err.message,null);\n  }\n}\n\nasync function showData(tenant){\n  return getSubscriptionId(tenant);\n}\n\nasync function getSubscriptionId(tenant){\n  var uri = baseUrl + uris.getDoc;\n  subscriptionId = 'amei-admin';\n  var path = tenant;\n\n  try {\n    var body = getRequest(path);\n    var response = await callResource(uri, body);\n    if (response.success){\n      var data = response.data;\n      return returnObject(false, 'OK',data.tenantMail);\n    }\n      \n  } catch (err) {\n    return returnObject(true, err.message, null);\n  }\n  \n}", "type": "server_js"}, {"name": "cardUi", "source": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>{{clientName}}</title>\n  <link rel=\"stylesheet\" href=\"https://ajax.googleapis.com/ajax/libs/angular_material/1.2.1/angular-material.min.css\">\n  <link rel=\"stylesheet\"\n    href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,1,0\" />\n  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic\">\n  <?!= include('style');?>\n</head>\n\n<body>\n  <div ng-app=\"app\">\n    <form name=\"schedule\">\n      <input type=\"hidden\" name='amei' value='<?=param?>' />\n      <div class=\"main-panel\" ng-controller=\"AppController\" layout=\"row\" layout-align=\"center start\" ng-cloak>\n        <div flex layout-padding layout-xs=\"column\" layout-gt-sm=\"row\" flex-gt-sm=\"100\">\n          <!-- <md-card layout=\"column\" flex-gt-sm=\"55\" class=\"md-headline mp-intro-card\">\n            <div layout=\"row\" layout-align=\"start center\">\n              <div class=\"daily-picture daily-back-ground\"></div>\n              <div layout-padding class=\"md-display-1\">\n                {{name}}\n              </div>\n            </div>\n          </md-card> -->\n\n          <md-card layout=\"column\" flex-gt-sm=\"100\" layout-padding ng-show=\"step == 1 || step == 0\">\n            <span class=\"md-subhead\">\n                    Primeiro vamos solicitar algumas informações pessoais.\n                    Estas informações serão enviadas para o prestador do serviço!\n                </span>\n            <md-input-container>\n              <label for=\"email\">Email</label>\n              <input type=\"email\" id=\"email\" required name=\"email\"\n              ng-model=\"order.consumer.email\"\n              minlength=\"10\"\n              maxlength=\"100\"\n              ng-pattern=\"/^.+@.+\\..+$/\"\n              ng-cloak\n              ng-blur=\"getClientByEmail()\"/>\n              <div ng-messages=\"schedule.email.$error\" role=\"alert\">\n                <div ng-message-exp=\"['required', 'minlength', 'maxlength', 'pattern']\">\n                  Seu e-mail deve ter entre 10 e 100 caractres. Não pode ser nulo e deve ser um e-mail válido!\n                </div>\n              </div>\n            </md-input-container>\n\n            <md-input-container>\n              <label for=\"name\">Nome</label>\n              <input type=\"text\" id=\"name\" required name=\"name\" ng-model=\"order.consumer.name\" ng-cloak/>\n              <div ng-messages=\"order.consumer.name.$error\">\n                <div ng-message=\"required\">Campo é obrigatório!</div>\n              </div>\n            </md-input-container>\n\n            <md-input-container>\n              <label for=\"celular\">Celular</label>\n              <input type=\"text\" id=\"celular\" required name=\"celular\" ng-model=\"order.consumer.cel\" angular-mask=\"(00) 00000-0000\" ng-cloak/>\n              <div ng-messages=\"order.consumer.cel.$error\">\n                <div ng-message=\"required\">Campo é obrigatório!</div>\n              </div>\n            </md-input-container>\n\n            <md-button class=\"md-primary\" ng-click=\"step = (isUnique ? 3 : 2)\">Próximo</md-button>\n          </md-card>\n\n          <md-card ng-show=\"step == 2\" class=\"inset\">\n            <section layout=\"column\">\n              <span class=\"md-subhead\">Nesta etapa você vai selecionar o pretador do serviço e os serviços que\n                        deseja atendimento.</span>\n              <md-button class=\"md-raised bg-color fg-color\" hide-gt-sm ng-click=\"showProvidersBottomSheet()\">\n                <span>Selecione o Prestador clicando aqui!</span>\n              </md-button>\n\n              <md-menu>\n                <md-button class=\"md-raised bg-color fg-color\" hide-sm ng-click=\"$mdMenu.open($event)\">\n                  <span ng-if=\"order.provider == null\">Selecione o Prestador clicando aqui!</span>\n                  <span ng-if=\"order.provider !== null\">{{order.provider.name}}</span>\n                </md-button>\n                <md-menu-content class=\"md-dense\" width=\"4\">\n                  <md-menu-item ng-repeat=\"prov in providers\">\n                    <md-button ng-click=\"selectProvider(prov)\" ng-clok>\n                      <span md-menu-align-target>{{prov.name}}</span>\n                    </md-button>\n                  </md-menu-item>\n                </md-menu-content>\n              </md-menu>\n\n              <md-list ng-cloak>\n                <md-subheader class=\"md-no-sticky\">Selecione o serviços abaixo: </md-subheader>\n                <md-list-item ng-repeat=\"service in services\" ng-click=\"selectService(service)\">\n                  <span>{{service.name}} (R$ {{service.price.toFixed(2).toString().replace('.',',')}})</span>\n                  <span class=\"material-symbols-rounded md-secondary\" ng-if=\"service.selected\" ng-click=\"selectService(service)\">cancel</span>\n                  <span class=\"material-symbols-rounded md-secondary\" ng-if=\"!service.selected\" ng-click=\"selectService(service)\">add_circle</span>\n                </md-list-item>\n                <md-subheader class=\"md-no-sticky\">Total: {{order.total.toFixed(2)}}</md-subheader>\n              </md-list>\n\n              <section layout=\"row\">\n\n                <md-button flex=\"50\" class=\"md-default\" ng-click=\"step = 1\">Voltar</md-button>\n                <md-button flex=\"50\" class=\"md-primary\" ng-click=\"step = 3\">Próximo</md-button>\n              </section>\n\n            </section>\n            <!-- Angular Templates -->\n            <?!= include('templates');?>\n          </md-card>\n          <md-card ng-show=\"step == 3\" ng-cloack>\n            <md-calendar ng-model=\"selectedDate\" md-min-date=\"minDate\"></md-calendar>\n            <md-divider></md-divider>\n            <md-subheader class=\"md-no-sticky\">Selecione o horário</md-subheader>\n            <md-radio-group ng-model=\"order.hour\">\n              <md-radio-button ng-repeat=\"hour in allowedHours | orderBy\" ng-cloak value=\"{{hour}}\">{{hour}}\n              </md-radio-button>\n            </md-radio-group>\n            <section class=\"row\">\n              <md-button flex=\"50\" class=\"md-default\" ng-click=\"step = (isUnique ? 1 : 2)\">Voltar</md-button>\n              <md-button class=\"md-primary\" ng-click=\"showPrerenderedDialog($event)\">Agendar</md-button>\n            </section>\n          </md-card>\n        </div>\n        <div style=\"visibility:hidden\">\n          <div class=\"md-dialog-container\" id=\"myDialog\">\n            <md-dialog layout-padding>\n              <h2>Confirmação de Agendamento</h2>\n              <md-dialog-content>\n                <p>Confirma o agendamento com {{order.provider.name}} no dia {{dateFriendly}} às {{order.hour}}.</p>\n              </md-dialog-content>\n              <md-dialog-actions>\n                <md-button class=\"md-default\" ng-click=\"cancel()\">Não</md-button>\n                <md-button class=\"md-primary\" ng-click=\"schedule()\">Sim</md-button>\n              </md-dialog-actions>\n            </md-dialog>\n          </div>\n        </div>\n      </div>\n  </div>\n  </form>\n\n\n  <!-- Angular Material Dependencies -->\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\"></script>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-animate.min.js\"></script>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-aria.min.js\"></script>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-messages.min.js\"></script>\n\n  <!-- Angular Material Javascript now available via Google CDN; version 1.2.1 used here -->\n  <script src=\"https://ajax.googleapis.com/ajax/libs/angular_material/1.2.1/angular-material.min.js\"></script>\n  <?!= include('simplemask');?>\n  <?!= include('appjs');?>\n\n\n</body>\n\n</html>", "type": "html"}, {"name": "style", "source": "<style>\n\n  .main-panel {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n  }\n\n  .daily-picture {\n    max-width: 150px;\n    max-height: 150px;\n    min-width: 64px;\n    min-height: 64px;\n    background-position-y: bottom;\n    border-radius: 4px;\n    background-size: cover;\n  }\n\n  .daily-back-ground {\n    background-image: url(\"https://mentorapro.com.br/daily-image/_daily_image.jpg\");\n  }\n\n  @media screen and (max-width: 769px) {\n    .mp-form-panel {\n      width: 100%;\n      height: 100%;\n    }\n  }\n</style>", "type": "html"}, {"name": "templates", "source": "<script type=\"text/ng-template\" id=\"providerBottomSheet.html\">\n  <md-bottom-sheet class=\"md-grid\" layout=\"column\">\n  <div layout=\"row\" layout-align=\"center center\" ng-cloak>\n    <h4>Since <code>clickOutsideToClose = false</code>, drag down or press ESC to close</h4>\n  </div>\n  <div ng-cloak>\n    <md-list flex layout=\"row\" layout-align=\"center center\">\n      <md-list-item ng-repeat=\"item in items\">\n        <div>\n          <md-button class=\"md-grid-item-content\" ng-click=\"\">\n            <md-icon md-svg-src=\"\"></md-icon>\n            <div class=\"md-grid-text\">  </div>\n          </md-button>\n        </div>\n      </md-list-item>\n    </md-list>\n  </div>\n</md-bottom-sheet>\n</script>", "type": "html"}]}
